unit TestSvEvents;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, TypInfo, Classes, SysUtils, Generics.Collections, ObjAuto, SvDelegates;

type
  // Test methods for class TMulticastEvent

  TAnonMethod = reference to procedure(const AName: string);
  TSimpleMethod = TNotifyEvent;

  TestTMulticastEvent = class(TTestCase)
  private
    FEventCount: Integer;
    FAnonMethod: TAnonMethod;
  protected
    procedure SimpleEvent(Sender: TObject);
    procedure SimpleEvent2(Sender: TObject);
    procedure SimpleEvent3(Sender: TObject);
  public
    procedure SetUp; override;
    procedure TearDown; override;

    property EventCount: Integer read FEventCount write FEventCount;
  end;

  TestTDelegate = class(TestTMulticastEvent)
  private
    FEvent: SvDelegate<TSimpleMethod>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddEventListener;
    procedure TestRemoveEventListener;
    procedure TestIndexOf;
  end;

  TestTAnonDelegate = class(TestTMulticastEvent)
  private
    FEvent: SvDelegate<TAnonMethod>;
  published
    procedure TestAddEventListener;
    procedure TestRemoveEventListener;
    procedure TestIndexOf;
  end;

implementation

uses
  Rtti;

procedure TestTMulticastEvent.SetUp;
begin
  inherited;
  FEventCount := 0;
  FAnonMethod := procedure(const AName: string)
    begin
      Inc(FEventCount);
    end;
end;

procedure TestTMulticastEvent.SimpleEvent(Sender: TObject);
begin
  Status('Simple Event called');
  Inc(FEventCount);
end;

procedure TestTMulticastEvent.SimpleEvent2(Sender: TObject);
begin
  Status('Simple Event2 called');
  Inc(FEventCount);
end;

procedure TestTMulticastEvent.SimpleEvent3(Sender: TObject);
begin
  Status('Simple Event3 called');
  Inc(FEventCount);
end;

procedure TestTMulticastEvent.TearDown;
begin
  inherited;
end;

const
  STR_PARAM = 'ParamText';


{ TestTDelegate }

procedure TestTDelegate.SetUp;
begin
  inherited;
  FEventCount := 0;
end;

procedure TestTDelegate.TearDown;
begin
  inherited;

end;

procedure TestTDelegate.TestAddEventListener;
var
  event: TSimpleMethod;
begin
  FEvent.Add(Self.SimpleEvent);
  FEvent.Add(Self.SimpleEvent2);

  for event in FEvent do event(Self);

  CheckEquals(2, FEventCount);
end;

procedure TestTDelegate.TestIndexOf;
begin
  FEvent.Add(Self.SimpleEvent);

  CheckEquals(0, FEvent.IndexOf(Self.SimpleEvent));

  FEvent.Add(Self.SimpleEvent2);

  CheckEquals(0, FEvent.IndexOf(Self.SimpleEvent2));

  CheckEquals(-1, FEvent.IndexOf(Self.SimpleEvent3));
end;

procedure TestTDelegate.TestRemoveEventListener;
begin
  CheckEquals(0, FEventCount);
  FEvent.Add(Self.SimpleEvent);
  CheckEquals(1, FEvent.Count);
  FEvent.Remove(Self.SimpleEvent);
  CheckEquals(0, FEvent.Count);
end;

{ TestTAnonDelegate }

procedure TestTAnonDelegate.TestAddEventListener;
var
  event: TAnonMethod;
  sText: string;
begin
  sText := '';

  event := procedure(const AName: string) begin sText := AName; Inc(FEventCount); end;

  FEvent.Add(FAnonMethod);
  FEvent.Add(event);

  CheckEquals(2, FEvent.Count);

  for event in FEvent do event(STR_PARAM);

  CheckEquals(2, FEventCount);

end;

procedure TestTAnonDelegate.TestIndexOf;
begin
  //
end;

procedure TestTAnonDelegate.TestRemoveEventListener;
begin
  CheckEquals(0, FEventCount);
  CheckEquals(0, FEvent.Count);
  FEvent.Add(FAnonMethod);
  CheckEquals(1, FEvent.Count);
  FEvent.Remove(FAnonMethod);
  CheckEquals(0, FEvent.Count);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDelegate.Suite);
  RegisterTest(TestTAnonDelegate.Suite);
end.

