unit TestSvRttiUtils;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  SvTesting.DUnit, SysUtils, Rtti, SvRttiUtils, Classes;

type
  TNotExists = class(TCustomAttribute)

  end;

  TTestClass = class
  private
    FName: string;
    FSecret: string;
    FValues: TStrings;

    property Secret: string read FSecret write FSecret;
  public
    constructor Create;
    destructor Destroy; override;

    [Timeout(200)]
    [Timeout(300)]
    procedure SomeLengthyOperation();


    property TestName: string read FName write FName;
    property Values: TStrings read FValues write FValues;
  end;

  // Test methods for class TSvRtti

  TestTSvRtti = class(TSvTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCreateNewClass;
    procedure TestCreateNewObject;
    procedure TestDestroyClass;
    procedure TestIsInstanceProp;
    procedure TestGetAttributesOfType;
    procedure TestGetAttributeOfType;
    procedure TestSetValue;
    procedure TestSetValueFromString;
  end;



implementation

uses
  TestFramework;

procedure TestTSvRtti.SetUp;
begin
  //
end;

procedure TestTSvRtti.TearDown;
begin
  //
end;

procedure TestTSvRtti.TestCreateNewClass;
var
  ReturnValue: TTestClass;
begin
  ReturnValue := nil;
  ReturnValue := TSvRtti.CreateNewClass<TTestClass>;
  try
    CheckTrue(Assigned(ReturnValue));
    CheckTrue(ReturnValue.ClassNameIs('TTestClass'));
  finally
    ReturnValue.Free;
  end;
end;

procedure TestTSvRtti.TestCreateNewObject;
var
  ReturnValue: TObject;
begin
  ReturnValue := nil;

  ReturnValue := TSvRtti.CreateNewObject(System.TypeInfo(TTestClass));
  try
    CheckTrue(Assigned(ReturnValue));
    CheckTrue(ReturnValue.ClassNameIs('TTestClass'));
  finally
    ReturnValue.Free;
  end;
end;

procedure TestTSvRtti.TestDestroyClass;
var
  AObject: TTestClass;
begin
  FailsOnMemoryLeak := True;
  AObject := TTestClass.Create;
  TSvRtti.DestroyClass<TTestClass>(AObject);
end;

procedure TestTSvRtti.TestIsInstanceProp;
var
  ReturnValue: Boolean;
  AObject: TTestClass;
  APropertyName: string;
begin
  AObject := TTestClass.Create;
  try
    APropertyName := 'Values';
    ReturnValue := TSvRtti.IsInstanceProp(APropertyName, AObject);
    CheckTrue(ReturnValue);

    APropertyName := 'Secret';
    ReturnValue := TSvRtti.IsInstanceProp(APropertyName, AObject);
    CheckFalse(ReturnValue);

    APropertyName := 'NotExists';
    ReturnValue := TSvRtti.IsInstanceProp(APropertyName, AObject);
    CheckFalse(ReturnValue);
  finally
    AObject.Free;
  end;
end;

procedure TestTSvRtti.TestGetAttributesOfType;
var
  ReturnValue: TArray<TimeoutAttribute>;
  ARttiObject: TRttiObject;
  AObject: TTestClass;
begin
  AObject := TTestClass.Create;
  try
    ARttiObject := TRttiContext.Create.GetType(AObject.ClassInfo).GetMethod('SomeLengthyOperation');

    ReturnValue := TSvRtti.GetAttributesOfType<TimeoutAttribute>(ARttiObject);

    CheckTrue(Length(ReturnValue)> 0);
    CheckTrue(Length(ReturnValue)= 2);

  finally
    AObject.Free;
  end;
end;

procedure TestTSvRtti.TestGetAttributeOfType;
var
  ReturnValue: TimeoutAttribute;
  LNotExists: TNotExists;
  ARttiObject: TRttiObject;
  AObject: TTestClass;
begin
  AObject := TTestClass.Create;
  try
    ARttiObject := TRttiContext.Create.GetType(AObject.ClassInfo).GetMethod('SomeLengthyOperation');

    ReturnValue := TSvRtti.GetAttributeOfType<TimeoutAttribute>(ARttiObject);

    CheckTrue(ReturnValue <> nil);
    CheckEquals(200, ReturnValue.Timeout);

    LNotExists := TSvRtti.GetAttributeOfType<TNotExists>(ARttiObject);

    CheckTrue(LNotExists = nil);

  finally
    AObject.Free;
  end;
end;

procedure TestTSvRtti.TestSetValue;
var
  AValue: TValue;
  AObject: TTestClass;
  APropertyName: string;
begin
  AObject := TTestClass.Create;
  try
    CheckNotEqualsString('Testing', AObject.TestName);
    TSvRtti.SetValue<TTestClass>('TestName', AObject, 'Testing');
    CheckEqualsString('Testing', AObject.TestName);
  finally
    AObject.Free;
  end;
end;

procedure TestTSvRtti.TestSetValueFromString;
var
  AField: TRttiProperty;
  AValue: string;
  AObject: TTestClass;
begin
  AObject := TTestClass.Create;
  try
    CheckNotEqualsString('Testing', AObject.TestName);
    AField := TRttiContext.Create.GetType(AObject.ClassInfo).GetProperty('TestName');
    TSvRtti.SetValueFromString(AObject, 'Testing', AField);
    CheckEqualsString('Testing', AObject.TestName);
  finally
    AObject.Free;
  end;
end;

{ TTestClass }

constructor TTestClass.Create;
begin
  inherited Create;
  FValues := TStringList.Create;
end;

destructor TTestClass.Destroy;
begin
  FValues.Free;
  inherited;
end;

procedure TTestClass.SomeLengthyOperation;
begin
  Sleep(100);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSvRtti.Suite);
end.

