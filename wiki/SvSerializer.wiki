#summary First steps with SvSerializer
#labels Phase-Implementation

= First steps =

 * Suppose you have declared your PODO (Plain Old Delphi Object):

{{{
type
  TFoobar = class
  private
    FFoo: string;
    FBar: string;
  public
    property Foo: string read FFoo write FFoo;
    property Bar: string read FBar write FBar;
    [SvTransient]
    property Skip: Boolean read FSkip write FSkip;
  end;
}}}

 * You can serialize the objects of this class using class helper methods:

{{{
uses
  SvSerializer;
...
var
  LFoobar: TFoobar;
  LJsonString, LXMLString: string;
begin
  LFoobar := TFoobar.Create;
  try
    LFoobar.Foo := 'Foo';
    LFoobar.Bar := 'Bar';
    LFoobar.Skip := True;
    //serialize to json
    LJsonString := LFoobar.ToJsonString;
    //serialize to xml
    LXMLString := LFoobar.ToXmlString;
  finally
    LFoobar.Free;
  end;
end;

}}}

 * You can also do this using class methods:
{{{
var
  LFoobar: TFoobar;
  LJsonString, LXMLString: string;
begin
  LFoobar := TFoobar.Create;
  try
    LFoobar.Foo := 'Foo';
    LFoobar.Bar := 'Bar';
    LFoobar.Skip := True;
    //serialize to json string
    TSvSerializer.SerializeObject(LFoobar, LJsonString, sstSuperJson);
    //serialize to xml string
    TSvSerializer.SerializeObject(LFoobar, LXMLString, sstNativeXML);
  finally
    LFoobar.Free;
  end;
end;
}}}

 * Deserialization is also very simple:

{{{
uses
  SvSerializer;
...
var
  LFoobar: TFoobar;
  LJsonString: string;
begin
  LJsonString := '{"Foo": "Foo", "Bar": "Bar"}';  
  LFoobar := TFoobar.FromJsonString(LJsonString);
  try
    CheckEqualsString('Foo', LFooBar.Foo);
  finally
    LFoobar.Free;
  end;
end;
}}}

 * Same example but using class methods:
{{{
var
  LFoobar: TFoobar;
  LJsonString: string;
begin
  LJsonString := '{"Foo": "Foo", "Bar": "Bar"}';  
  LFoobar := TFoobar.Create;
  try
    TSvSerializer.DeserializeObject(LFoobar, LJsonString, sstSuperJson);
    CheckEqualsString('Foo', LFooBar.Foo);
  finally
    LFoobar.Free;
  end;
end;
}}}

 * Deserializing types which do not have non argument constructors:

{{{
type
  TComplexConstructor = class
  private
    FName: string;
    FValue: string;
  public
    constructor Create(const AName: string; AValue: string);

    property Name: string read FName write FName;
    property Value: string read FValue write FValue;
  end;

// we need to register our constructor for such a type 
  TSvRttiInfo.RegisterConstructor(TypeInfo(TComplexConstructor)
    , function: TObject
    begin
      Result := TComplexConstructor.Create('', '');
    end);
//from now on TSvSerializer will be able to create this type of object during deserialization
}}}

= Additional information=

 * You need to register serializers in order to use them. You can do this by adding their units to your project (e.g. {{{ uses SvSerializerSuperJson, SvSerializerNativeXML, SvSerializerJson}}}).
 * Serializer saves only _properties_ which are not marked with {{{[SvTransient]}}} attribute. You can add {{{[SvSerialize('PropertyName')]}}} attribute if you want to set property name for serialization.
 * Supported types: all basic types, TObject descendants with no argument constructors, Enumerable types ({{{TList, TObjectList, TArray, TList<T>, TDictionary<T>}}} etc.), enumerable interfaces (e.g. from [https://code.google.com/p/delphi-spring-framework/ Delphi Spring Framework] - {{{IList<T>, ICollection<T>, etc.}}})  Records, TDataset descendants, Enumerators, Sets, etc. 